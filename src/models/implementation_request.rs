/*
 * RankVectors API
 *
 * Intelligent internal linking optimization API using AI.   RankVectors helps you automatically discover and implement optimal internal links  across your website to improve SEO performance and user experience.  ## Key Features - **AI-Powered Analysis**: Uses OpenAI embeddings to find optimal linking opportunities - **Smart Crawling**: Automatically crawls and analyzes your website content - **Automated Implementation**: Implement links via webhooks or manual instructions - **Credit-Based System**: Pay-per-use model with transparent pricing - **Multi-Platform Support**: Works with any CMS or platform via REST API  ## Getting Started 1. Create a project with your website URL 2. Start a crawl to analyze your content 3. Generate AI-powered link suggestions 4. Implement suggestions via API or webhook 5. Track performance and manage credits  ## Authentication All API endpoints require authentication using your RankVectors API key. Include your API key in the `Authorization` header: ``` Authorization: Bearer YOUR_API_KEY ```  Get your API key from your RankVectors dashboard: Settings â†’ API Keys 
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support@rankvectors.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ImplementationRequest {
    /// Array of suggestion IDs to implement
    #[serde(rename = "suggestionIds")]
    pub suggestion_ids: Vec<String>,
    /// Platform type
    #[serde(rename = "platform")]
    pub platform: Platform,
    #[serde(rename = "credentials")]
    pub credentials: Box<models::CustomCredentials>,
    /// Skip content change detection
    #[serde(rename = "skipContentVerification", skip_serializing_if = "Option::is_none")]
    pub skip_content_verification: Option<bool>,
    /// Implementation method
    #[serde(rename = "implementationMethod", skip_serializing_if = "Option::is_none")]
    pub implementation_method: Option<ImplementationMethod>,
}

impl ImplementationRequest {
    pub fn new(suggestion_ids: Vec<String>, platform: Platform, credentials: models::CustomCredentials) -> ImplementationRequest {
        ImplementationRequest {
            suggestion_ids,
            platform,
            credentials: Box::new(credentials),
            skip_content_verification: None,
            implementation_method: None,
        }
    }
}
/// Platform type
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Platform {
    #[serde(rename = "custom")]
    Custom,
}

impl Default for Platform {
    fn default() -> Platform {
        Self::Custom
    }
}
/// Implementation method
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ImplementationMethod {
    #[serde(rename = "api")]
    Api,
    #[serde(rename = "manual")]
    Manual,
}

impl Default for ImplementationMethod {
    fn default() -> ImplementationMethod {
        Self::Api
    }
}

