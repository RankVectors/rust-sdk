/*
 * RankVectors API
 *
 * Intelligent internal linking optimization API using AI.   RankVectors helps you automatically discover and implement optimal internal links  across your website to improve SEO performance and user experience.  ## Key Features - **AI-Powered Analysis**: Uses OpenAI embeddings to find optimal linking opportunities - **Smart Crawling**: Automatically crawls and analyzes your website content - **Automated Implementation**: Implement links via webhooks or manual instructions - **Credit-Based System**: Pay-per-use model with transparent pricing - **Multi-Platform Support**: Works with any CMS or platform via REST API  ## Getting Started 1. Create a project with your website URL 2. Start a crawl to analyze your content 3. Generate AI-powered link suggestions 4. Implement suggestions via API or webhook 5. Track performance and manage credits  ## Authentication All API endpoints require authentication using your RankVectors API key. Include your API key in the `Authorization` header: ``` Authorization: Bearer YOUR_API_KEY ```  Get your API key from your RankVectors dashboard: Settings â†’ API Keys 
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support@rankvectors.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SpendingLimitStatus {
    /// Whether spending limit is enabled
    #[serde(rename = "enabled")]
    pub enabled: bool,
    /// Spending limit
    #[serde(rename = "limit")]
    pub limit: f64,
    /// Amount used
    #[serde(rename = "used")]
    pub used: f64,
    /// Amount remaining
    #[serde(rename = "remaining")]
    pub remaining: f64,
}

impl SpendingLimitStatus {
    pub fn new(enabled: bool, limit: f64, used: f64, remaining: f64) -> SpendingLimitStatus {
        SpendingLimitStatus {
            enabled,
            limit,
            used,
            remaining,
        }
    }
}

