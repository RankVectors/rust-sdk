/*
 * RankVectors API
 *
 * Intelligent internal linking optimization API using AI.   RankVectors helps you automatically discover and implement optimal internal links  across your website to improve SEO performance and user experience.  ## Key Features - **AI-Powered Analysis**: Uses OpenAI embeddings to find optimal linking opportunities - **Smart Crawling**: Automatically crawls and analyzes your website content - **Automated Implementation**: Implement links via webhooks or manual instructions - **Credit-Based System**: Pay-per-use model with transparent pricing - **Multi-Platform Support**: Works with any CMS or platform via REST API  ## Getting Started 1. Create a project with your website URL 2. Start a crawl to analyze your content 3. Generate AI-powered link suggestions 4. Implement suggestions via API or webhook 5. Track performance and manage credits  ## Authentication All API endpoints require authentication using your RankVectors API key. Include your API key in the `Authorization` header: ``` Authorization: Bearer YOUR_API_KEY ```  Get your API key from your RankVectors dashboard: Settings â†’ API Keys 
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support@rankvectors.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Implementation {
    /// Unique implementation identifier
    #[serde(rename = "id")]
    pub id: String,
    /// Implementation status
    #[serde(rename = "status")]
    pub status: Status,
    /// Platform used
    #[serde(rename = "platform")]
    pub platform: Platform,
    /// Implementation method
    #[serde(rename = "implementationMethod", skip_serializing_if = "Option::is_none")]
    pub implementation_method: Option<ImplementationMethod>,
    /// Credits consumed
    #[serde(rename = "creditsUsed")]
    pub credits_used: f64,
    /// Implementation start timestamp
    #[serde(rename = "createdAt")]
    pub created_at: String,
    /// Implementation completion timestamp
    #[serde(rename = "completedAt", skip_serializing_if = "Option::is_none")]
    pub completed_at: Option<String>,
    /// Platform-specific metadata
    #[serde(rename = "metadata", skip_serializing_if = "Option::is_none")]
    pub metadata: Option<std::collections::HashMap<String, serde_json::Value>>,
    #[serde(rename = "suggestion")]
    pub suggestion: Box<models::Suggestion>,
    /// Rollback history
    #[serde(rename = "rollbacks", skip_serializing_if = "Option::is_none")]
    pub rollbacks: Option<Vec<models::Rollback>>,
}

impl Implementation {
    pub fn new(id: String, status: Status, platform: Platform, credits_used: f64, created_at: String, suggestion: models::Suggestion) -> Implementation {
        Implementation {
            id,
            status,
            platform,
            implementation_method: None,
            credits_used,
            created_at,
            completed_at: None,
            metadata: None,
            suggestion: Box::new(suggestion),
            rollbacks: None,
        }
    }
}
/// Implementation status
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "pending")]
    Pending,
    #[serde(rename = "in_progress")]
    InProgress,
    #[serde(rename = "success")]
    Success,
    #[serde(rename = "failed")]
    Failed,
    #[serde(rename = "rolled_back")]
    RolledBack,
}

impl Default for Status {
    fn default() -> Status {
        Self::Pending
    }
}
/// Platform used
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Platform {
    #[serde(rename = "custom")]
    Custom,
}

impl Default for Platform {
    fn default() -> Platform {
        Self::Custom
    }
}
/// Implementation method
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ImplementationMethod {
    #[serde(rename = "api")]
    Api,
    #[serde(rename = "manual")]
    Manual,
}

impl Default for ImplementationMethod {
    fn default() -> ImplementationMethod {
        Self::Api
    }
}

