/*
 * RankVectors API
 *
 * Intelligent internal linking optimization API using AI.   RankVectors helps you automatically discover and implement optimal internal links  across your website to improve SEO performance and user experience.  ## Key Features - **AI-Powered Analysis**: Uses OpenAI embeddings to find optimal linking opportunities - **Smart Crawling**: Automatically crawls and analyzes your website content - **Automated Implementation**: Implement links via webhooks or manual instructions - **Credit-Based System**: Pay-per-use model with transparent pricing - **Multi-Platform Support**: Works with any CMS or platform via REST API  ## Getting Started 1. Create a project with your website URL 2. Start a crawl to analyze your content 3. Generate AI-powered link suggestions 4. Implement suggestions via API or webhook 5. Track performance and manage credits  ## Authentication All API endpoints require authentication using your RankVectors API key. Include your API key in the `Authorization` header: ``` Authorization: Bearer YOUR_API_KEY ```  Get your API key from your RankVectors dashboard: Settings â†’ API Keys 
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support@rankvectors.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ChangeResult {
    /// URL of the page
    #[serde(rename = "pageUrl")]
    pub page_url: String,
    /// Change status
    #[serde(rename = "changeStatus")]
    pub change_status: ChangeStatus,
    /// Page visibility
    #[serde(rename = "visibility")]
    pub visibility: Visibility,
    /// Previous scrape timestamp
    #[serde(rename = "previousScrapeAt", skip_serializing_if = "Option::is_none")]
    pub previous_scrape_at: Option<String>,
}

impl ChangeResult {
    pub fn new(page_url: String, change_status: ChangeStatus, visibility: Visibility) -> ChangeResult {
        ChangeResult {
            page_url,
            change_status,
            visibility,
            previous_scrape_at: None,
        }
    }
}
/// Change status
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ChangeStatus {
    #[serde(rename = "same")]
    Same,
    #[serde(rename = "changed")]
    Changed,
    #[serde(rename = "not_found")]
    NotFound,
}

impl Default for ChangeStatus {
    fn default() -> ChangeStatus {
        Self::Same
    }
}
/// Page visibility
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Visibility {
    #[serde(rename = "visible")]
    Visible,
    #[serde(rename = "hidden")]
    Hidden,
    #[serde(rename = "error")]
    Error,
}

impl Default for Visibility {
    fn default() -> Visibility {
        Self::Visible
    }
}

