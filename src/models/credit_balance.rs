/*
 * RankVectors API
 *
 * Intelligent internal linking optimization API using AI.   RankVectors helps you automatically discover and implement optimal internal links  across your website to improve SEO performance and user experience.  ## Key Features - **AI-Powered Analysis**: Uses OpenAI embeddings to find optimal linking opportunities - **Smart Crawling**: Automatically crawls and analyzes your website content - **Automated Implementation**: Implement links via webhooks or manual instructions - **Credit-Based System**: Pay-per-use model with transparent pricing - **Multi-Platform Support**: Works with any CMS or platform via REST API  ## Getting Started 1. Create a project with your website URL 2. Start a crawl to analyze your content 3. Generate AI-powered link suggestions 4. Implement suggestions via API or webhook 5. Track performance and manage credits  ## Authentication All API endpoints require authentication using your RankVectors API key. Include your API key in the `Authorization` header: ``` Authorization: Bearer YOUR_API_KEY ```  Get your API key from your RankVectors dashboard: Settings â†’ API Keys 
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support@rankvectors.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CreditBalance {
    #[serde(rename = "success")]
    pub success: bool,
    #[serde(rename = "balance")]
    pub balance: Box<models::CreditBalanceInfo>,
    #[serde(rename = "pageLimit")]
    pub page_limit: Box<models::PageLimitStatus>,
    #[serde(rename = "spendingLimit")]
    pub spending_limit: Box<models::SpendingLimitStatus>,
    #[serde(rename = "autoRecharge")]
    pub auto_recharge: Box<models::AutoRechargeSettings>,
    #[serde(rename = "currentPeriod")]
    pub current_period: Box<models::PeriodCharges>,
    /// Usage history (if requested)
    #[serde(rename = "usageHistory", skip_serializing_if = "Option::is_none")]
    pub usage_history: Option<Vec<models::UsageHistoryItem>>,
}

impl CreditBalance {
    pub fn new(success: bool, balance: models::CreditBalanceInfo, page_limit: models::PageLimitStatus, spending_limit: models::SpendingLimitStatus, auto_recharge: models::AutoRechargeSettings, current_period: models::PeriodCharges) -> CreditBalance {
        CreditBalance {
            success,
            balance: Box::new(balance),
            page_limit: Box::new(page_limit),
            spending_limit: Box::new(spending_limit),
            auto_recharge: Box::new(auto_recharge),
            current_period: Box::new(current_period),
            usage_history: None,
        }
    }
}

