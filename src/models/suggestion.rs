/*
 * RankVectors API
 *
 * Intelligent internal linking optimization API using AI.   RankVectors helps you automatically discover and implement optimal internal links  across your website to improve SEO performance and user experience.  ## Key Features - **AI-Powered Analysis**: Uses OpenAI embeddings to find optimal linking opportunities - **Smart Crawling**: Automatically crawls and analyzes your website content - **Automated Implementation**: Implement links via webhooks or manual instructions - **Credit-Based System**: Pay-per-use model with transparent pricing - **Multi-Platform Support**: Works with any CMS or platform via REST API  ## Getting Started 1. Create a project with your website URL 2. Start a crawl to analyze your content 3. Generate AI-powered link suggestions 4. Implement suggestions via API or webhook 5. Track performance and manage credits  ## Authentication All API endpoints require authentication using your RankVectors API key. Include your API key in the `Authorization` header: ``` Authorization: Bearer YOUR_API_KEY ```  Get your API key from your RankVectors dashboard: Settings â†’ API Keys 
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support@rankvectors.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Suggestion {
    /// Unique suggestion identifier
    #[serde(rename = "id")]
    pub id: String,
    /// Project identifier
    #[serde(rename = "projectId")]
    pub project_id: String,
    /// Suggestion status
    #[serde(rename = "status")]
    pub status: Status,
    /// AI-calculated relevance score (0-1)
    #[serde(rename = "relevanceScore")]
    pub relevance_score: f64,
    /// Suggested anchor text
    #[serde(rename = "anchorText")]
    pub anchor_text: String,
    /// Context where the link should be placed
    #[serde(rename = "context", skip_serializing_if = "Option::is_none")]
    pub context: Option<String>,
    #[serde(rename = "sourcePage")]
    pub source_page: Box<models::PageInfo>,
    #[serde(rename = "targetPage")]
    pub target_page: Box<models::PageInfo>,
    /// AI reasoning for the suggestion
    #[serde(rename = "reasoning", skip_serializing_if = "Option::is_none")]
    pub reasoning: Option<String>,
    /// Suggestion creation timestamp
    #[serde(rename = "createdAt")]
    pub created_at: String,
    /// Last update timestamp
    #[serde(rename = "updatedAt", skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<String>,
}

impl Suggestion {
    pub fn new(id: String, project_id: String, status: Status, relevance_score: f64, anchor_text: String, source_page: models::PageInfo, target_page: models::PageInfo, created_at: String) -> Suggestion {
        Suggestion {
            id,
            project_id,
            status,
            relevance_score,
            anchor_text,
            context: None,
            source_page: Box::new(source_page),
            target_page: Box::new(target_page),
            reasoning: None,
            created_at,
            updated_at: None,
        }
    }
}
/// Suggestion status
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "pending")]
    Pending,
    #[serde(rename = "approved")]
    Approved,
    #[serde(rename = "rejected")]
    Rejected,
    #[serde(rename = "implemented")]
    Implemented,
}

impl Default for Status {
    fn default() -> Status {
        Self::Pending
    }
}

